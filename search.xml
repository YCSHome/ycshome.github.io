<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>CataclysmDDA</title>
      <link href="/Cataclysm-Days-Ahead/CataclysmDDA/"/>
      <url>/Cataclysm-Days-Ahead/CataclysmDDA/</url>
      
        <content type="html"><![CDATA[<h2 id="大灾变：未来的黑暗日子"><a href="#大灾变：未来的黑暗日子" class="headerlink" title="大灾变：未来的黑暗日子"></a>大灾变：未来的黑暗日子</h2><h3 id="初见"><a href="#初见" class="headerlink" title="初见"></a>初见</h3><p>讲真，我第一次见到这个游戏还是比较偶然的。</p><p>当时我还在沉迷泰南的一款叫 rimworld 的模拟殖民游戏。或许是对这类游戏的痴迷，我逐渐了解到了另外一款叫矮人要塞的游戏。由于我本身就是一名 vim 和 linux 重度用户，所以我对这种完全由 <code>ASCII</code> 组成的游戏不仅没有排斥、反而十分感兴趣。</p><p><img src="https://picx.zhimg.com/80/v2-7cf484ca6e9d497d87db0273aa6fcc65_720w.png" alt="Cataclysm Days Ahead"></p><p>兜兜转转，我了解到了 <code>Cataclysm Days Ahead</code> 这款有趣的游戏。</p><p>零星几个字符组成的界面，可有可无的新手教程。组成了我们对这个世界简单的认识。</p><p>新建一个简单的存档，一个稚嫩的角色，一大堆乱七八糟堆砌而成的属性，繁多的 vim 风格的按键，让我无所适从。</p><p>记得我第一个存档，出生在一个简陋的庇护所内。几张长椅、仅能维持几天的口粮和一个 NPC 就构成了这里的全部。一脸懵逼的我砸碎了一个长椅，自己琢磨着捡起两个木板。可是我当时并不知道 <code>&amp;</code> 才可以制造物品。</p><p>打开门，我也并不知道 <code>x</code> 键可以让我眺望，只知道安全模式一直提醒我有丧尸在附近。我嫌烦，按 <code>!</code> 关闭安全模式后、准备按照地图上的标识前往附近的一个小镇子（亦或者是一座城市？）</p><p>没出几步路被两个僵尸追着。下意识的我打算开始奔跑打算甩开这两个僵尸。体力慢慢耗尽，精疲力尽的我越走越慢。当两个僵尸死死抓住我时我知道必须孤注一掷。我将物品栏中的木板手持，不料手持物品也有用时导致我陷入劣势。在几番搏斗之后，我放弃挣扎，任凭两名丧尸的生吞活剥。</p><p>对，这就是一个十分绝望的游戏，绝望得令人奔溃。</p>]]></content>
      
      
      <categories>
          
          <category> Cataclysm Days Ahead </category>
          
      </categories>
      
      
        <tags>
            
            <tag> Cataclysm Days Ahead </tag>
            
            <tag> Introduction </tag>
            
            <tag> Game </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>nvim-markdown</title>
      <link href="/neovim/nvim-markdown/"/>
      <url>/neovim/nvim-markdown/</url>
      
        <content type="html"><![CDATA[<h2 id="在-Neovim-x2F-Vim-中编写-Markdown"><a href="#在-Neovim-x2F-Vim-中编写-Markdown" class="headerlink" title="在 Neovim&#x2F;Vim 中编写 Markdown"></a>在 Neovim&#x2F;Vim 中编写 Markdown</h2><p>在以前我们曾经拥有过一个非常完美的插件：<a href="https://github.com/iamcco/markdown-preview.nvim">iamcco&#x2F;markdown-preview.nvim</a>。这是一个非常好的插件，它在很大程度上满足了我们的要求。</p><p>但是它任然有一些非常致命的缺点，比如说无法利用第三方转换工具 <code>pandoc</code> 以及自定义主题和高亮格式的方法与一般的工具不一样。对于一个颜控来说无法自定义主题其实是非常难受的一件事。</p><p>在逛 <code>Reddit</code> 论坛时我无意间了解到了一个叫 <a href="https://github.com/euclio/vim-markdown-composer">markdown-composer</a> 的插件。它是为数不多可以异步渲染、同时还可以利用第三方渲染工具的插件。不过美中不足的就是它无法 <strong>同步滚动</strong> 这可能是这个插件最致命的缺点了。实际上，<a href="https://github.com/euclio/vim-markdown-composer/issues/34">同步滚动的要求</a> 18 年就有人提出来了，由于插件原理的原因到现在还没有实现。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><p>由于它是用 Rust 编写的，所以你需要使用 <code>cargo</code> 来编译。你需要先安装好相关的 Rust 工具包：<a href="https://www.rust-lang.org/zh-CN/tools/install">Rust 安装指南</a></p><p>然后使用你自己喜欢的插件管理器安装插件吧。</p><h4 id="vim-plug"><a href="#vim-plug" class="headerlink" title="vim-plug"></a>vim-plug</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">function!</span> <span class="hljs-title">BuildComposer</span><span class="hljs-params">(info)</span><br>  <span class="hljs-keyword">if</span> <span class="hljs-variable">a:info</span>.status != <span class="hljs-string">&#x27;unchanged&#x27;</span> || <span class="hljs-variable">a:info</span>.force<br>    <span class="hljs-keyword">if</span> <span class="hljs-built_in">has</span>(<span class="hljs-string">&#x27;nvim&#x27;</span>)<br>      !cargo build --release --locked<br>    <span class="hljs-keyword">else</span><br>      !cargo build --release --locked --<span class="hljs-keyword">no</span>-default-features --features json-rpc<br>    <span class="hljs-keyword">endif</span><br>  <span class="hljs-keyword">endif</span><br><span class="hljs-keyword">endfunction</span><br><br>Plug <span class="hljs-string">&#x27;euclio/vim-markdown-composer&#x27;</span>, &#123; <span class="hljs-string">&#x27;do&#x27;</span>: <span class="hljs-keyword">function</span>(<span class="hljs-string">&#x27;BuildComposer&#x27;</span>) &#125;<br></code></pre></td></tr></table></figure><h4 id="Vundle"><a href="#Vundle" class="headerlink" title="Vundle"></a>Vundle</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">Plugin <span class="hljs-string">&#x27;euclio/vim-markdown-composer&#x27;</span><br></code></pre></td></tr></table></figure><p>不过在这之后你需要手动编译一遍：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-comment"># cd 到你的插件目录，再执行接下来的操作</span><br><span class="hljs-comment"># 如果你是 Vim 用户</span><br>cargo build --release --no-default-features --features json-rpc<br><span class="hljs-comment"># 如果你是 Neovim 用户</span><br>cargo build --release<br></code></pre></td></tr></table></figure><h4 id="Dein-vim"><a href="#Dein-vim" class="headerlink" title="Dein.vim"></a>Dein.vim</h4><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">call</span> dein#add(<span class="hljs-string">&#x27;euclio/vim-markdown-composer&#x27;</span>, &#123; <span class="hljs-string">&#x27;build&#x27;</span>: <span class="hljs-string">&#x27;cargo build --release&#x27;</span> &#125;)<br></code></pre></td></tr></table></figure><h4 id="Packer-nvim"><a href="#Packer-nvim" class="headerlink" title="Packer.nvim"></a>Packer.nvim</h4><p>官方其实并没有给出用 Packer 安装的方法……下面这段代码其实是我琢磨出来的</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs lua">use &#123;<br>  <span class="hljs-string">&quot;euclio/vim-markdown-composer&quot;</span>,<br>  run = <span class="hljs-string">&quot;cargo build --release&quot;</span>,<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h3><p>然后你就可以简单地进行编写了……</p><p><img src="https://s1.ax1x.com/2022/08/14/vUhWkQ.gif"></p><p>非常简单，不是吗？简洁而迅速，是我最喜欢这个插件的地方。</p><p>这个插件默认采用的渲染器是 CommonMark，支持最基本的语法和 Katex，如果不需要拓展语法其实完全够用了。如果你需要指定渲染器，比如 Pandoc，那么你只需要指定 <code>g:markdown_composer_external_renderer</code>。不过插件要求的渲染器必须从 <code>stdin</code> 中读入文件并且从 <code>stdout</code> 中输出转换后的结果。</p><p>下面给出将渲染器指定为 <code>pandoc</code> 示例：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:markdown_composer_external_renderer</span>=<span class="hljs-string">&#x27;pandoc -f markdown -t html&#x27;</span><br></code></pre></td></tr></table></figure><p>在 lua 中，可以这么写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.g.markdown_composer_external_renderer = <span class="hljs-string">&#x27;pandoc -f markdown -t html&#x27;</span><br></code></pre></td></tr></table></figure><p>插件默认的代码高亮是与 github 的一样，不过可以指定渲染出来后代码的高亮格式。比如：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">let</span> <span class="hljs-variable">g:markdown_composer_syntax_theme</span> = <span class="hljs-string">&#x27;atom-one-dark&#x27;</span><br></code></pre></td></tr></table></figure><p>在 lua 中，可以这么写：</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.g.markdown_composer_syntax_theme = <span class="hljs-string">&#x27;atom-one-dark&#x27;</span><br></code></pre></td></tr></table></figure><p>对比图：左 github，右 atom-one-dark</p><p><img src="https://s1.ax1x.com/2022/08/14/vUzIIA.png" alt="vUzIIA.png"></p><p>所有高亮格式的预览你都可以在这个网址里看到：<a href="https://highlightjs.org/static/demo/">网址</a></p><p><code>markdown_composer_syntax_theme</code> 所需要的值都可以在 <a href="https://github.com/isagalaev/highlight.js/tree/master/src/styles">这里</a> 找到（不要把进去 <code>.css</code> 写进去）</p><p>插件不仅可以指定代码高亮的格式，还可以指定 markdown 整体的一个主题而不是默认的白色。不过这个会相对麻烦一点点。</p><p>如果你需要指定相应的主题，你需要提供 css 文件的 url 地址。不过必须是一个指向本地文件的 <code>file</code> url 而不能是 http 或者 http。</p><p>比如我在 <code>/theme</code> 文件夹中有一个 <code>dracula.css</code> 文件是我想要的主题样式，此时我们可以这么写：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><br></code></pre></td></tr></table></figure><p><code>/theme/dracula.css</code></p>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> markdown </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>neovim</title>
      <link href="/neovim/neovim/"/>
      <url>/neovim/neovim/</url>
      
        <content type="html"><![CDATA[<h2 id="Neovim-笔记"><a href="#Neovim-笔记" class="headerlink" title="Neovim 笔记"></a>Neovim 笔记</h2><p>洛谷上的博客渲染有点问题，建议上 <a href="https://ycshome.github.io/neovim/neovim">github</a> 看。</p><ul><li>高级操作 API 操作<ul><li><a href="../nvim-buf/">Neovim与缓冲区</a></li></ul></li></ul>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>test</title>
      <link href="/uncategorized/test/"/>
      <url>/uncategorized/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Neovim的缓冲区</title>
      <link href="/neovim/nvim-buf/"/>
      <url>/neovim/nvim-buf/</url>
      
        <content type="html"><![CDATA[<h2 id="Neovim的缓冲区"><a href="#Neovim的缓冲区" class="headerlink" title="Neovim的缓冲区"></a>Neovim的缓冲区</h2><p>缓冲区是 vim 中一个十分重要的存在。我们对一切文件的操作（不管是不是文件吧）都需要先创建一个缓冲区，然后对缓冲区进行操作。这是对缓冲区了解的第一步。</p><p>所有 API 我都是对着官方文档机翻过来、配合上自己实践后完全理解之后进行转述的。同时会加入大量自己的理解和自己写的示例。</p><p>几乎可以说国内找不到第二篇如此详细的文章了。</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>命令 <code>buffer</code> 可以将当前窗口更改至相应的缓冲区，可以通过句柄（数字）来得到或者用 <code>tab</code> 自动补全出来相应的文件名。</p><p>命令 <code>buffers</code> <code>ls</code> 可以列出所有满足 <code>buflisted=true</code> 的缓冲区。不过可以通过 <code>buffers!</code> <code>ls!</code> 强制列出来</p><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_create_buf(&#123;listed&#125;, &#123;scratch&#125;)<br></code></pre></td></tr></table></figure><p>创建一个全新、空白未命名的缓冲区。这是我们搞事情的第一步。</p><ul><li><p><code>listed</code><br>一个 <code>bool</code>，用来决定缓冲区是否可以被 <code>buffers</code> 或者 <code>ls</code> 列出来。</p></li><li><p><code>scratch</code><br>一个 <code>bool</code>，当值为 <code>true</code> 时创造出来的缓冲区 <code>modeline</code> 不打开，否则为打开。对 <a href="https://zhuanlan.zhihu.com/p/151289861">modeline的解释</a></p></li></ul><p>返回值就是创建的缓冲区的句柄。</p><p>一般来说我们只需要 <code>local buf = vim.api.nvim_create_buf(false, true)</code> 就可以了。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_get_current_buf()<br></code></pre></td></tr></table></figure><p>获取当前光标所在位置的缓冲区的句柄。挺常用的吧。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_set_current_buf(&#123;buffer&#125;)<br></code></pre></td></tr></table></figure><p>用来设置当前窗口的缓冲区。</p><p>不过当 <code>textlock</code> 激活的时候不允许使用（不太明白这是什么？）</p><ul><li><code>buffer</code> 一个数字，代表缓冲区的句柄。</li></ul><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_get_option(&#123;buffer&#125;, &#123;name&#125;)<br></code></pre></td></tr></table></figure><p>挺重要的一个API，可以返回当前缓冲区的相关配置选项的值。</p><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则意味着当前缓冲区</p></li><li><p><code>name</code><br>相关 <code>option</code> 的名字</p></li></ul><p>比如我想知道当前缓冲区的 <code>number</code> 选项信息如何:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">:lua <span class="hljs-built_in">print</span>(vim.api.nvim_buf_get_option(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;number&quot;</span>))<br></code></pre></td></tr></table></figure><p>即可。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_set_option(&#123;buffer&#125;, &#123;name&#125;, &#123;value&#125;)<br></code></pre></td></tr></table></figure><p>设置指定缓冲区的指定配置的值</p><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则为当前缓冲区</p></li><li><p><code>name</code><br>指定的 <code>option</code></p></li><li><p><code>value</code><br>指定的值</p></li></ul><p>例子:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.api.nvim_buf_set_option(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_attach(&#123;buffer&#125;, &#123;send_buffer&#125;, &#123;opts&#125;)<br></code></pre></td></tr></table></figure><p><del>版面差点撑爆Deepl的翻译上限</del></p><p>用来激活一个通道上的缓冲区更新事件，或者用来在 lua 回调。 请配合后文中的 API Buffer Updates 理解一些概念，但是没有多大帮助</p><p>官方示例:</p><blockquote><p>在全局变量的 <code>events</code> 中获取缓冲区的更新。<br>可以使用 <code>print(vim.inspect(events))</code> 来查看其内容</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">events = &#123;&#125;<br>vim.api.nvim_buf_attach(<span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, &#123;<br>  on_lines = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>    <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(events, &#123;...&#125;)<br>  <span class="hljs-keyword">end</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则为当前缓冲区</p></li><li><p><code>send_buffer</code><br>如果初始通知应该包含整个缓冲区，那么第一个通知将会是 <code>nvim_buf_lines_event</code>，否则将会是 <code>nvim_buf_changedtick_event</code>。这不能在 lua 回调中使用。</p></li><li><p><code>opts</code><br>这是一个可选参数（但是你必须提供一个列表，即使是空列表）</p><ul><li><p><code>on_lines</code><br>更改缓冲区内容时的 lua 回调。返回 <code>true</code> 以分离。参数：</p><ul><li>一个字符串: “lines”（真的是这玩意）</li><li>缓冲区句柄</li><li><code>b:changedtick</code></li><li>更改的第一行（以0开始）</li><li>更改的最后一行</li><li>先前内容的字节数量。</li><li>deleted_codepoints（如果 <code>utf_sizes</code> 为真）</li><li>deleted_codeunits（如果 <code>utf_sizes</code> 为真）（不太明白这两个参数有啥用）</li></ul></li><li><p><code>on_bytes</code><br>相对于 <code>on_lines</code>，它将会提供更加详细的信息。返回 <code>true</code> 时分离。参数：</p><ul><li>一个字符串: “bytes”（真的是这玩意）</li><li>缓冲区句柄</li><li><code>b:changedtick</code></li><li>更改后的开始行（以0开始）</li><li>更改后的结束行</li><li>更改后的字节偏移量</li><li>变更后的文本的旧尾行</li><li>变更后的文本的旧尾列</li><li>变更后的文本的旧结束字节长度</li><li>变更后的文本的新尾行</li><li>变更后的文本的新尾列</li><li>变更后的文本的新结束字节长度</li></ul></li><li><p><code>on_changedtick</code><br>在没有文字变化的情况下，在 <code>changedtick</code> 的增量上调用的 lua 回调。参数：</p><ul><li>一个字符串 <code>changedtick</code></li><li>缓冲区句柄</li><li><code>b:changedtick</code></li></ul></li><li><p><code>on_detach</code><br>分离时调用的 lua 回调，参数：</p><ul><li>一个字符串 <code>detach</code></li><li>缓冲区句柄</li></ul></li><li><p><code>on_reload</code><br>重新加载时调用的回调。此时整个缓冲区内容应该被认为是被改变了的。参数：</p><ul><li>一个字符串 <code>reload</code></li><li>缓冲区句柄</li></ul></li><li><p><code>utf_sizes</code><br>包括被替换区域的 <code>utf-32</code> 和 <code>utf-16</code> 的大小，其实是作为 <code>on_lines</code> 的参数 qwq</p></li><li><p><code>preview</code><br>同时也将它添加到命令预览中，也就是 <code>inccommand</code> 事件。</p></li></ul></li></ul><p>返回值：如果链接失败那么就返回 false，否则就是 true</p><hr><h3 id="API-Buffer-Updates"><a href="#API-Buffer-Updates" class="headerlink" title="API Buffer Updates"></a>API Buffer Updates</h3><p>Neovim 中的 API 客户端允许你通过一种类似 <code>附加</code> 的方式来实时更新缓冲区。这和一个与 autocmd有关的<code>TextChanged</code> 非常像，但是功能更加强大并且更加精细。也就是说可以用来监控当前缓冲区。</p><p>一般来说，我们可以调用 <code>nvim_buf_attach()</code> 获取以下通知。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, &#123;firstline&#125;, &#123;lastline&#125;, &#123;linedata&#125;, &#123;more&#125;]<br></code></pre></td></tr></table></figure><p>当在 <code>fristline</code> 与 <code>lastline</code>（不包括）之间的文本被改变为 <code>linedata</code> 列表中的新文本时。精细程度是一行，也就是说如果改变了一个字符，整行都会被传回。</p><p>当然，如果 <code>changedtick</code> 为 <code>v:null</code>（<code>nil</code>） 的时候，这意味着屏幕上的行即显示出来的文本被改变了，而不是缓冲区的内容被改变了。<code>linedata</code> 当然包括被改变的屏幕行。这会发生在用 <code>inccommand</code> 显示缓冲区预览的时候。</p><ul><li><p><code>buf</code><br>API 对应的句柄</p></li><li><p><code>changedtick</code><br>缓冲的<code>b:changedtick</code> 的值。你可以通过 <code>help b:changedtick</code> 了解这是什么东西。你完全可以发送一个用来检查 <code>b:changedtick</code> 的 API 命令作为请求的一部分，来确保没有其它的变化。</p></li><li><p><code>firstline</code><br>被替换的行号。以 0 开始。即如果是第一行被替换了，那么 <code>fristline</code> 其实是 0 而不是 1</p></li><li><p><code>lastline</code><br>未被替换的第一行的行号。不过由于是以 0 代表第一行，如果第 2 行到第 5 行被替换了，那么 <code>lastline</code> 值为 5 而不是 6。如果这个事件是附加后的初始更新之一，那么 <code>lastline</code> 值为 -1。</p></li><li><p><code>linedata</code><br>包含新缓冲区内的字符串。换行符将会被省略、并且空行会被视为空字符串。</p></li><li><p><code>more</code><br>一个 Boolean 值，用来表示当前变更是否被划分成了多个 <code>nvim_buf_lines_event</code> 通知。</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">nvim_buf_changedtick_event[</span><span class="hljs-template-variable">&#123;buf&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;changedtick&#125;</span><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><p>如果 <code>b:changedtick</code> 增加，那么这就可以用来撤回&#x2F;重做。</p><ul><li><p><code>buf</code><br>缓冲区句柄</p></li><li><p><code>changedtick</code><br>缓冲区的 <code>b:changedtick</code> 的新值</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nvim_buf_detach_event<span class="hljs-selector-attr">[&#123;buf&#125;]</span><br></code></pre></td></tr></table></figure><p>如果缓冲区被分离，也就是更新被禁止时，显示的调用方式是通过 <code>nvim_buf_detach()</code>。或者这在下述情况下被隐式触发：</p><ul><li><p>缓冲区被丢弃并且没有被隐藏</p></li><li><p>缓冲区被重新加载，例如使用 <code>:edit</code> 或者是别的外部变化所触发的 <code>checktime</code> 或者 <code>autoread</code></p></li><li><p>更常见的，就是缓冲区从内存中被卸载了</p></li></ul><ul><li><code>buf</code><br>缓冲区句柄</li></ul><p><strong>接下来是样例</strong></p><p>不过这个样例只是辅助理解它的操作。你无法通过它来明白在 lua 中的细节操作。</p><p>当你调用了 <code>nvim_buf_attach()</code> 并且将 <code>send_buffer</code> 设置为 <code>true</code>，此时会先发送：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvim_buf_lines_event</span>[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>,<span class="hljs-meta"> [&quot;&quot;], v:false]</span><br></code></pre></td></tr></table></figure><p>然后某个憨憨在缓冲区里加入了两行，发送</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">&quot;line1&quot;</span>, <span class="hljs-string">&quot;line2&quot;</span>], v:false]<br></code></pre></td></tr></table></figure><p>然后这个憨憨在一个”Hello world”的行末尾加上了一个字符 “!”，发送</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">nvim_buf_lines_event[</span><span class="hljs-template-variable">&#123;buf&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;changedtick&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;linenr&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;linenr&#125;</span><span class="language-xml"> + 1, [&quot;Hello world!&quot;], v:false]</span><br></code></pre></td></tr></table></figure><p>这个憨憨在第三行输入”20dd”删掉了20行代码，发送</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvim_buf_lines_event</span>[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>,<span class="hljs-meta"> [], v:false]</span><br></code></pre></td></tr></table></figure><p>这个憨憨用 <code>VISUAL LINE</code> 模式选择了 3-5 行并且在第六行输入 “p” ，发送</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>,<br>  [<span class="hljs-string">&#x27;pasted line 1&#x27;</span>, <span class="hljs-string">&#x27;pasted line 2&#x27;</span>, <span class="hljs-string">&#x27;pasted line 3&#x27;</span>, <span class="hljs-string">&#x27;pasted line 4&#x27;</span>,<br>   <span class="hljs-string">&#x27;pasted line 5&#x27;</span>, <span class="hljs-string">&#x27;pasted line 6&#x27;</span>],<br>  v:false<br>]<br></code></pre></td></tr></table></figure><p>这个憨憨用 “:edit” 刷新了页面，发送</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nvim_buf_detach_event<span class="hljs-selector-attr">[&#123;buf&#125;]</span><br></code></pre></td></tr></table></figure><p>但是我目前还没有找到获取通知的API</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><code>nvim_buf_attach</code> 是我整得最难受的一个 API，国内压根没有教程资源，官方给的示例又不清不楚，让人难受到吐。</p><p>现在还没有更新完qwq</p>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
    
    <entry>
      <title>Neovim/Vim 与它的 autocmd</title>
      <link href="/neovim/nvim-autocmd/"/>
      <url>/neovim/nvim-autocmd/</url>
      
        <content type="html"><![CDATA[<h2 id="Neovim-x2F-Vim-和它的-autocmd"><a href="#Neovim-x2F-Vim-和它的-autocmd" class="headerlink" title="Neovim&#x2F;Vim 和它的 autocmd"></a>Neovim&#x2F;Vim 和它的 autocmd</h2><h3 id="从-vim-开始谈起"><a href="#从-vim-开始谈起" class="headerlink" title="从 vim 开始谈起"></a>从 vim 开始谈起</h3><p>autocmd 是 vim 中一个非常实用的东西。autocmd即自动命令，指当满足一定条件下会自动触发的事件。在 vim 中我们可以实用 <code>autocmd</code> 这个简单的命令来进行定义。</p><p>如果您对 autocmd 足够了解，只是想知道在 Neovim 里的 API，可以直接跳过这一部分。</p><p>如果你想要创建一个新的自动命令，只需要使用如下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">autocmd</span> [group] &#123;event&#125; &#123;aupat&#125; [++once] [++nested] &#123;cmd&#125;<br></code></pre></td></tr></table></figure><p>其中，<code>&#123;...&#125;</code> 对应的参数是必须参数，<code>[...]</code> 对应的参数是可选参数。</p><h4 id="快速入门"><a href="#快速入门" class="headerlink" title="快速入门"></a>快速入门</h4><p>首先我们可以看一个例子：</p><p>在命令模式下输入这段命令</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">sleep</span> <span class="hljs-number">500</span><span class="hljs-keyword">m</span><br></code></pre></td></tr></table></figure><p>然后任意保存一个文件……</p><p>你会发现你的 vim 卡了一下，大概半秒。这就是自动命令在搞鬼了。当你保存文件的时候，就相当于触发了一个事件 <code>BufWrite</code>。vim 发现你刚好定义了一个自动命令，这个自动命令要求当触发 <code>BufWrite</code> 事件时、文件名刚好又匹配 <code>*</code>，于是便执行命令 <code>:sleep 500m</code> （即暂停 <code>0.5</code> 秒）</p><p>在这一个自动命令里面，<code>BufWrite</code> 对应的就是 <code>&#123;event&#125;</code>，即触发所需要的时间。<code>*</code> 对应的参数就是 <code>&#123;aupat&#125;</code>，<code>&#123;aupat&#125;</code> 即 <code>autocmd-pattern</code>（自动命令匹配模式），当触发对应事件并且文件名匹配 <code>&#123;aupat&#125;</code> 时，就会执行 <code>&#123;cmd&#125;</code>。</p><p>其中，<code>&#123;cmd&#125;</code> 对应的是一个命令，不过经过我的实践，貌似 <code>&#123;cmd&#125;</code> 并不可以是一个函数，也就是说如果你想通过 <code>autocmd</code> 执行一个 vim 函数必须通过类似 <code>call fn()</code> 的方式调用。</p><h4 id="group"><a href="#group" class="headerlink" title="group"></a>group</h4><p>group ，即自动命令组。可以用来管理多个 autocmd 命令。</p><p>我们有一个用来创建&#x2F;切换自动命令组的命令 <code>augroup</code>，先看一个示例：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">augroup</span> test<br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-keyword">augroup</span> END<br></code></pre></td></tr></table></figure><blockquote><p>这里提一嘴关于 vim 命令运行的技巧<br>你可以将上述命令保存到一个文件里面，例如保存到 <code>test.vim</code><br>然后运行 <code>source %</code>，<code>%</code> 意味着当前文件，此时就相当于运行了一遍 vimscript</p></blockquote><p>当你执行上述命令之后，再随意保存一个文件。然后通过 <code>message</code> 来查看相关信息。</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">source</span> test.<span class="hljs-keyword">vim</span><br>:message clear<br>:<span class="hljs-keyword">w</span><br>:message<br><span class="hljs-keyword">a</span><br><span class="hljs-string">&quot;test.vim&quot;</span> <span class="hljs-number">3</span>L, <span class="hljs-number">57</span>B written<br></code></pre></td></tr></table></figure><p>如果 message 出来的信息过多影响观感可以用 <code>message clear</code> 清空<br>此时，若你尝试使用 <code>autocmd!</code> 清空掉这条自动命令……</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim">:message clear<br>:autocmd!<br>:message clear<br>:<span class="hljs-keyword">w</span><br><span class="hljs-keyword">a</span><br><span class="hljs-string">&quot;test.vim&quot;</span> <span class="hljs-number">3</span>L, <span class="hljs-number">57</span>B written<br></code></pre></td></tr></table></figure><p>发现了吗？这条自动命令并没有被清掉。此时我们已经可以大概猜出 <code>group</code> 的作用：用来将自动命令分组。而 <code>augroup</code> 所做的就是 <strong>创建</strong> 并切换自动命令组。其中一个最特别的 <code>augroup end|END</code> 可以回到默认分组。</p><p>对于分组，除了使自动命令的分类更加清晰，还有一个最大的作用：防止同一个自动命令被执行多次。</p><p>在自动命令中，由于 vim 压根不知道你是否要保留哪怕是一模一样的自动命令，所以最简单粗暴的做法就是让每一个自动命令都是独立的。对于以下命令：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">augroup</span> test<br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-keyword">augroup</span> END<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">source</span> %<br>:<span class="hljs-keyword">source</span> %<br>:message clear<br>:<span class="hljs-keyword">w</span><br>:message<br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-string">&quot;test.vim&quot;</span> <span class="hljs-number">6</span>L, <span class="hljs-number">153</span>B written<br></code></pre></td></tr></table></figure><p>由于我们执行了两遍 <code>source</code>，导致原本 <code>test</code> 组里的自动命令也翻了一倍。为了解决这种奇怪的问题，我们可以这么做：</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs vim"><span class="hljs-keyword">augroup</span> test<br>  autocmd!<br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br>  <span class="hljs-keyword">autocmd</span> BufWrite * <span class="hljs-keyword">echom</span> <span class="hljs-string">&quot;a&quot;</span><br><span class="hljs-keyword">augroup</span> END<br></code></pre></td></tr></table></figure><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">source</span> %<br>:<span class="hljs-keyword">source</span> %<br>:message clear<br>:<span class="hljs-keyword">w</span><br>:message<br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-keyword">a</span><br><span class="hljs-string">&quot;test.vim&quot;</span> <span class="hljs-number">7</span>L, <span class="hljs-number">164</span>B written<br></code></pre></td></tr></table></figure><h4 id="event"><a href="#event" class="headerlink" title="event"></a>event</h4><p>event 即事件，每当你执行某些特定动作时会触发一些事件。比如 <code>BufWrite</code> 就是一个最简单的事件：当缓冲区内的文本写入一个文件是。你可以简单理解为当你保存文件的时候。也就是说你可以通过很多个事件，来实现一些非常有趣的功能：比如当你打开一个新文件的时候替你读取一个模板等等。</p><p>注：每一个例子中的细节可能不同情况下不一样</p><ul><li><p><code>BufAdd</code><br>当你创建一个新的缓冲区后将其添加到缓冲区列表时，亦或者是缓冲区列表中的一个缓冲区被重命名。这在编写插件的时候会非常有用。</p><blockquote><p>例子:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufAdd * <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you add/rename a buffer&quot;</span><br>:<span class="hljs-keyword">vs</span> test<br>you <span class="hljs-built_in">add</span>/<span class="hljs-built_in">rename</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">buffer</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>BufDelete</code><br>当一个缓冲区被删除、或者被重命名之前。  </p><blockquote><p>例子:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufDelete * <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;you delete/rename a buffer&quot;</span><br>:<span class="hljs-keyword">ls</span><br>  <span class="hljs-number">1</span> %<span class="hljs-keyword">a</span>   <span class="hljs-string">&quot;[No Name]&quot;</span>                    <span class="hljs-built_in">line</span> <span class="hljs-number">1</span><br>:<span class="hljs-keyword">bdelete</span> <span class="hljs-number">1</span><br>you <span class="hljs-keyword">delete</span>/<span class="hljs-built_in">rename</span> <span class="hljs-keyword">a</span> <span class="hljs-keyword">buffer</span><br></code></pre></td></tr></table></figure></blockquote></li><li><p><code>BufEnter</code><br>当你进入一个缓冲区时。不过会在 <code>BufAdd</code> 和 <code>BufReadPost</code> 之后。</p><blockquote><p>例子:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufEnter * <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;BufEnter&quot;</span><br>:<span class="hljs-keyword">vs</span> test<br>BufEnter<br></code></pre></td></tr></table></figure><p>然后输入 <code>&lt;C-W&gt;l</code> 来切换窗口，也会输出 <code>BufEnter</code></p></blockquote></li><li><p><code>BufFilePost</code><br>当你用 <code>:file</code> 或者 <code>saveas</code> 更改光标选择的缓冲区的名字时。</p><blockquote><p>例子:</p><figure class="highlight vim"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs vim">:<span class="hljs-keyword">autocmd</span> BufFilePost * <span class="hljs-keyword">echo</span> <span class="hljs-string">&quot;change&quot;</span><br>:fild test<br><span class="hljs-keyword">change</span><br>:<span class="hljs-keyword">saveas</span> test2<br><span class="hljs-keyword">change</span><br></code></pre></td></tr></table></figure></blockquote></li></ul>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
            <tag> vim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
