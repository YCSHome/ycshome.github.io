<?xml version="1.0" encoding="utf-8"?>
<search> 
  
  
    
    <entry>
      <title>test</title>
      <link href="/uncategorized/test/"/>
      <url>/uncategorized/test/</url>
      
        <content type="html"><![CDATA[]]></content>
      
      
      
    </entry>
    
    
    
    <entry>
      <title>Neovim的缓冲区</title>
      <link href="/neovim/nvim-buf/"/>
      <url>/neovim/nvim-buf/</url>
      
        <content type="html"><![CDATA[<h2 id="Neovim的缓冲区"><a href="#Neovim的缓冲区" class="headerlink" title="Neovim的缓冲区"></a>Neovim的缓冲区</h2><p>缓冲区是 vim 中一个十分重要的存在。我们对一切文件的操作（不管是不是文件吧）都需要先创建一个缓冲区，然后对缓冲区进行操作。这是对缓冲区了解的第一步。</p><p>所有 API 我都是对着官方文档机翻过来、配合上自己实践后完全理解之后进行转述的。同时会加入大量自己的理解和自己写的示例。</p><p>几乎可以说国内找不到第二篇如此详细的文章了。</p><h3 id="相关命令"><a href="#相关命令" class="headerlink" title="相关命令"></a>相关命令</h3><p>命令 <code>buffer</code> 可以将当前窗口更改至相应的缓冲区，可以通过句柄（数字）来得到或者用 <code>tab</code> 自动补全出来相应的文件名。</p><p>命令 <code>buffers</code> <code>ls</code> 可以列出所有满足 <code>buflisted=true</code> 的缓冲区。不过可以通过 <code>buffers!</code> <code>ls!</code> 强制列出来</p><h3 id="相关API"><a href="#相关API" class="headerlink" title="相关API"></a>相关API</h3><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_create_buf(&#123;listed&#125;, &#123;scratch&#125;)<br></code></pre></td></tr></table></figure><p>创建一个全新、空白未命名的缓冲区。这是我们搞事情的第一步。</p><ul><li><p><code>listed</code><br>一个 <code>bool</code>，用来决定缓冲区是否可以被 <code>buffers</code> 或者 <code>ls</code> 列出来。</p></li><li><p><code>scratch</code><br>一个 <code>bool</code>，当值为 <code>true</code> 时创造出来的缓冲区 <code>modeline</code> 不打开，否则为打开。对 <a href="https://zhuanlan.zhihu.com/p/151289861">modeline的解释</a></p></li></ul><p>返回值就是创建的缓冲区的句柄。</p><p>一般来说我们只需要 <code>local buf = vim.api.nvim_create_buf(false, true)</code> 就可以了。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_get_current_buf()<br></code></pre></td></tr></table></figure><p>获取当前光标所在位置的缓冲区的句柄。挺常用的吧。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_set_current_buf(&#123;buffer&#125;)<br></code></pre></td></tr></table></figure><p>用来设置当前窗口的缓冲区。</p><p>不过当 <code>textlock</code> 激活的时候不允许使用（不太明白这是什么？）</p><ul><li><code>buffer</code> 一个数字，代表缓冲区的句柄。</li></ul><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_get_option(&#123;buffer&#125;, &#123;name&#125;)<br></code></pre></td></tr></table></figure><p>挺重要的一个API，可以返回当前缓冲区的相关配置选项的值。</p><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则意味着当前缓冲区</p></li><li><p><code>name</code><br>相关 <code>option</code> 的名字</p></li></ul><p>比如我想知道当前缓冲区的 <code>number</code> 选项信息如何:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">:lua <span class="hljs-built_in">print</span>(vim.api.nvim_buf_get_option(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;number&quot;</span>))<br></code></pre></td></tr></table></figure><p>即可。</p><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_set_option(&#123;buffer&#125;, &#123;name&#125;, &#123;value&#125;)<br></code></pre></td></tr></table></figure><p>设置指定缓冲区的指定配置的值</p><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则为当前缓冲区</p></li><li><p><code>name</code><br>指定的 <code>option</code></p></li><li><p><code>value</code><br>指定的值</p></li></ul><p>例子:</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">vim.api.nvim_buf_set_option(<span class="hljs-number">0</span>, <span class="hljs-string">&quot;number&quot;</span>, <span class="hljs-literal">true</span>)<br></code></pre></td></tr></table></figure><hr><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_attach(&#123;buffer&#125;, &#123;send_buffer&#125;, &#123;opts&#125;)<br></code></pre></td></tr></table></figure><p><del>版面差点撑爆Deepl的翻译上限</del></p><p>用来激活一个通道上的缓冲区更新事件，或者用来在 lua 回调。 请配合后文中的 API Buffer Updates 理解一些概念，但是没有多大帮助</p><p>官方示例:</p><blockquote><p>在全局变量的 <code>events</code> 中获取缓冲区的更新。<br>可以使用 <code>print(vim.inspect(events))</code> 来查看其内容</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs lua">events = &#123;&#125;<br>vim.api.nvim_buf_attach(<span class="hljs-number">0</span>, <span class="hljs-literal">false</span>, &#123;<br>  on_lines = <span class="hljs-function"><span class="hljs-keyword">function</span><span class="hljs-params">(...)</span></span><br>    <span class="hljs-built_in">table</span>.<span class="hljs-built_in">insert</span>(events, &#123;...&#125;)<br>  <span class="hljs-keyword">end</span><br>&#125;)<br></code></pre></td></tr></table></figure></blockquote><ul><li><p><code>buffer</code><br>缓冲区句柄，若为 <code>0</code> 则为当前缓冲区</p></li><li><p><code>send_buffer</code><br>如果初始通知应该包含整个缓冲区，那么第一个通知将会是 <code>nvim_buf_lines_event</code>，否则将会是 <code>nvim_buf_changedtick_event</code>。这不能在 lua 回调中使用。</p></li><li><p><code>opts</code><br>这是一个可选参数（但是你必须提供一个列表，即使是空列表）</p><ul><li><p><code>on_lines</code><br>更改缓冲区内容时的 lua 回调。返回 <code>true</code> 以分离。参数：</p><ul><li>一个字符串: “lines”（真的是这玩意）</li><li>缓冲区句柄</li><li><code>b:changedtick</code></li><li>更改的第一行（以0开始）</li><li>更改的最后一行</li><li>先前内容的字节数量。</li><li>deleted_codepoints（如果 <code>utf_sizes</code> 为真）</li><li>deleted_codeunits（如果 <code>utf_sizes</code> 为真）（不太明白这两个参数有啥用）</li></ul></li><li><p><code>on_bytes</code><br>相对于 <code>on_lines</code>，它将会提供更加详细的信息。返回 <code>true</code> 时分离。参数：</p><ul><li>一个字符串: “bytes”（真的是这玩意）</li><li>缓冲区句柄</li><li><code>b:changedtick</code></li><li>更改后的开始行（以0开始）</li><li>更改后的结束行</li><li>更改后的字节偏移量</li><li>变更后的文本的旧尾行</li><li>变更后的文本的旧尾列</li><li>变更后的文本的旧结束字节长度</li><li>变更后的文本的新尾行</li><li>变更后的文本的新尾列</li><li>变更后的文本的新结束字节长度</li></ul></li><li><p><code>on_changedtick</code><br>在没有文字变化的情况下，在 <code>changedtick</code> 的增量上调用的 lua 回调。参数：</p><ul><li>一个字符串 <code>changedtick</code></li><li>缓冲区句柄</li><li><code>b:changedtick</code></li></ul></li><li><p><code>on_detach</code><br>分离时调用的 lua 回调，参数：</p><ul><li>一个字符串 <code>detach</code></li><li>缓冲区句柄</li></ul></li><li><p><code>on_reload</code><br>重新加载时调用的回调。此时整个缓冲区内容应该被认为是被改变了的。参数：</p><ul><li>一个字符串 <code>reload</code></li><li>缓冲区句柄</li></ul></li><li><p><code>utf_sizes</code><br>包括被替换区域的 <code>utf-32</code> 和 <code>utf-16</code> 的大小，其实是作为 <code>on_lines</code> 的参数 qwq</p></li><li><p><code>preview</code><br>同时也将它添加到命令预览中，也就是 <code>inccommand</code> 事件。</p></li></ul></li></ul><p>返回值：如果链接失败那么就返回 false，否则就是 true</p><hr><h3 id="API-Buffer-Updates"><a href="#API-Buffer-Updates" class="headerlink" title="API Buffer Updates"></a>API Buffer Updates</h3><p>Neovim 中的 API 客户端允许你通过一种类似 <code>附加</code> 的方式来实时更新缓冲区。这和一个与 autocmd有关的<code>TextChanged</code> 非常像，但是功能更加强大并且更加精细。也就是说可以用来监控当前缓冲区。</p><p>一般来说，我们可以调用 <code>nvim_buf_attach()</code> 获取以下通知。</p><figure class="highlight lua"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs lua">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, &#123;firstline&#125;, &#123;lastline&#125;, &#123;linedata&#125;, &#123;more&#125;]<br></code></pre></td></tr></table></figure><p>当在 <code>fristline</code> 与 <code>lastline</code>（不包括）之间的文本被改变为 <code>linedata</code> 列表中的新文本时。精细程度是一行，也就是说如果改变了一个字符，整行都会被传回。</p><p>当然，如果 <code>changedtick</code> 为 <code>v:null</code>（<code>nil</code>） 的时候，这意味着屏幕上的行即显示出来的文本被改变了，而不是缓冲区的内容被改变了。<code>linedata</code> 当然包括被改变的屏幕行。这会发生在用 <code>inccommand</code> 显示缓冲区预览的时候。</p><ul><li><p><code>buf</code><br>API 对应的句柄</p></li><li><p><code>changedtick</code><br>缓冲的<code>b:changedtick</code> 的值。你可以通过 <code>help b:changedtick</code> 了解这是什么东西。你完全可以发送一个用来检查 <code>b:changedtick</code> 的 API 命令作为请求的一部分，来确保没有其它的变化。</p></li><li><p><code>firstline</code><br>被替换的行号。以 0 开始。即如果是第一行被替换了，那么 <code>fristline</code> 其实是 0 而不是 1</p></li><li><p><code>lastline</code><br>未被替换的第一行的行号。不过由于是以 0 代表第一行，如果第 2 行到第 5 行被替换了，那么 <code>lastline</code> 值为 5 而不是 6。如果这个事件是附加后的初始更新之一，那么 <code>lastline</code> 值为 -1。</p></li><li><p><code>linedata</code><br>包含新缓冲区内的字符串。换行符将会被省略、并且空行会被视为空字符串。</p></li><li><p><code>more</code><br>一个 Boolean 值，用来表示当前变更是否被划分成了多个 <code>nvim_buf_lines_event</code> 通知。</p></li></ul><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">nvim_buf_changedtick_event[</span><span class="hljs-template-variable">&#123;buf&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;changedtick&#125;</span><span class="language-xml">]</span><br></code></pre></td></tr></table></figure><p>如果 <code>b:changedtick</code> 增加，那么这就可以用来撤回&#x2F;重做。</p><ul><li><p><code>buf</code><br>缓冲区句柄</p></li><li><p><code>changedtick</code><br>缓冲区的 <code>b:changedtick</code> 的新值</p></li></ul><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nvim_buf_detach_event<span class="hljs-selector-attr">[&#123;buf&#125;]</span><br></code></pre></td></tr></table></figure><p>如果缓冲区被分离，也就是更新被禁止时，显示的调用方式是通过 <code>nvim_buf_detach()</code>。或者这在下述情况下被隐式触发：</p><ul><li><p>缓冲区被丢弃并且没有被隐藏</p></li><li><p>缓冲区被重新加载，例如使用 <code>:edit</code> 或者是别的外部变化所触发的 <code>checktime</code> 或者 <code>autoread</code></p></li><li><p>更常见的，就是缓冲区从内存中被卸载了</p></li></ul><ul><li><code>buf</code><br>缓冲区句柄</li></ul><p><strong>接下来是样例</strong></p><p>不过这个样例只是辅助理解它的操作。你无法通过它来明白在 lua 中的细节操作。</p><p>当你调用了 <code>nvim_buf_attach()</code> 并且将 <code>send_buffer</code> 设置为 <code>true</code>，此时会先发送：</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvim_buf_lines_event</span>[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">0</span>, -<span class="hljs-number">1</span>,<span class="hljs-meta"> [&quot;&quot;], v:false]</span><br></code></pre></td></tr></table></figure><p>然后某个憨憨在缓冲区里加入了两行，发送</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs prolog">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">0</span>, <span class="hljs-number">0</span>, [<span class="hljs-string">&quot;line1&quot;</span>, <span class="hljs-string">&quot;line2&quot;</span>], v:false]<br></code></pre></td></tr></table></figure><p>然后这个憨憨在一个”Hello world”的行末尾加上了一个字符 “!”，发送</p><figure class="highlight dust"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dust"><span class="language-xml">nvim_buf_lines_event[</span><span class="hljs-template-variable">&#123;buf&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;changedtick&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;linenr&#125;</span><span class="language-xml">, </span><span class="hljs-template-variable">&#123;linenr&#125;</span><span class="language-xml"> + 1, [&quot;Hello world!&quot;], v:false]</span><br></code></pre></td></tr></table></figure><p>这个憨憨在第三行输入”20dd”删掉了20行代码，发送</p><figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-attribute">nvim_buf_lines_event</span>[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">22</span>,<span class="hljs-meta"> [], v:false]</span><br></code></pre></td></tr></table></figure><p>这个憨憨用 <code>VISUAL LINE</code> 模式选择了 3-5 行并且在第六行输入 “p” ，发送</p><figure class="highlight prolog"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs prolog">nvim_buf_lines_event[&#123;buf&#125;, &#123;changedtick&#125;, <span class="hljs-number">2</span>, <span class="hljs-number">5</span>,<br>  [<span class="hljs-string">&#x27;pasted line 1&#x27;</span>, <span class="hljs-string">&#x27;pasted line 2&#x27;</span>, <span class="hljs-string">&#x27;pasted line 3&#x27;</span>, <span class="hljs-string">&#x27;pasted line 4&#x27;</span>,<br>   <span class="hljs-string">&#x27;pasted line 5&#x27;</span>, <span class="hljs-string">&#x27;pasted line 6&#x27;</span>],<br>  v:false<br>]<br></code></pre></td></tr></table></figure><p>这个憨憨用 “:edit” 刷新了页面，发送</p><figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs css">nvim_buf_detach_event<span class="hljs-selector-attr">[&#123;buf&#125;]</span><br></code></pre></td></tr></table></figure><p>但是我目前还没有找到获取通知的API</p><h3 id="后记"><a href="#后记" class="headerlink" title="后记"></a>后记</h3><p><code>nvim_buf_attach</code> 是我整得最难受的一个 API，国内压根没有教程资源，官方给的示例又不清不楚，让人难受到吐。</p><p>现在还没有更新完qwq</p>]]></content>
      
      
      <categories>
          
          <category> neovim </category>
          
      </categories>
      
      
        <tags>
            
            <tag> neovim </tag>
            
        </tags>
      
    </entry>
    
    
  
  
</search>
